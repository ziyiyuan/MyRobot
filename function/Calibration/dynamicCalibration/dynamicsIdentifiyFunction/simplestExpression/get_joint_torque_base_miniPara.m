function torque = get_joint_torque_base_miniPara(Robot,motionPara)
% torque: based on minimal-parameters set
% kinematicsPara: current position, velocity and acceleration
% robotType:
% gravity:
[index, DP] = get_mini_para_set_analytic(Robot, 'Internal'); %% 得到最小参数集
gravity = Robot.gravity;

% M1 = 0; M2 = 0; M3 = 0; M4 = 0; M5 = 0; M6 = 0;
% XX1 = 0; XY1 = 0; XZ1 = 0; YY1 = 0; YZ1 = 0; YY2 = 0; YY3 = 0; YY4 =0; YY5 = 0; YY6 = 0;

ZZ1 = DP(1);  MX1 = DP(2);   MY1 = DP(3);                                                              %MZ1 = 0;
XX2 = DP(4);  XY2 = DP(5);   XZ2 = DP(6);  YZ2 = DP(7);  ZZ2 = DP(8);   MX2 = DP(9);  MY2 = DP(10);  %MZ2 = 0;
XX3 = DP(11); XY3 = DP(12);  XZ3 = DP(13); YZ3 = DP(14); ZZ3 = DP(15);  MX3 = DP(16); MY3 = DP(17);  %MZ3 = 0;
XX4 = DP(18); XY4 = DP(19);  XZ4 = DP(20); YZ4 = DP(21); ZZ4 = DP(22);  MX4 = DP(23); MY4 = DP(24);  %MZ4 = 0;
XX5 = DP(25); XY5 = DP(26);  XZ5 = DP(27); YZ5 = DP(28); ZZ5 = DP(29);  MX5 = DP(30); MY5 = DP(31);  %MZ5 = 0;
XX6 = DP(32); XY6 = DP(33);  XZ6 = DP(34); YZ6 = DP(35); ZZ6 = DP(36);  MX6 = DP(37); MY6 = DP(38);  %MZ6 = 0;

a2 = Robot.Para.KP.a(3); a3 = Robot.Para.KP.a(4);
d1 = Robot.Para.KP.d(1); d2 = Robot.Para.KP.d(2); d5 = Robot.Para.KP.d(5); d6 = Robot.Para.KP.d(6);
q = motionPara.q;
qd = motionPara.qd;
qdd = motionPara.qdd;

s1 = sin(q(1)); s2 = sin(q(2)); s3 = sin(q(3)); s4 = sin(q(4)); s5 = sin(q(5)); s6 = sin(q(6));
c1 = cos(q(1)); c2 = cos(q(2)); c3 = cos(q(3)); c4 = cos(q(4)); c5 = cos(q(5)); c6 = cos(q(6));

tmp0 = -gravity(1)*s1;
tmp1 = -gravity(2)*c1;
tmp2 = tmp0 - tmp1;
tmp3 = qd(1)^2;
tmp4 = d2*tmp3;
tmp5 = tmp2 - tmp4;
tmp6 = qd(1)*s2;
tmp7 = c2*qdd(1) - qd(2)*tmp6;
tmp8 = c2*qd(1);
tmp9 = qd(2)*tmp8;
tmp10 = -qdd(1)*s2 - tmp9;
tmp11 = a2*tmp10;
tmp12 = a2*tmp9;
tmp13 = -tmp0 + tmp1 + tmp11 - tmp12 + tmp4;
tmp14 = c3*tmp6 - s3*tmp8;
tmp15 = c3*tmp7 + qd(3)*tmp14 - s3*tmp10;
tmp16 = c3*tmp8 + s3*tmp6;
tmp17 = -c3*tmp10 - qd(3)*tmp16 - s3*tmp7;
tmp18 = -qdd(2) + qdd(3);
tmp19 = c4*tmp16 - s4*tmp14;
tmp20 = c4*tmp17 + qd(4)*tmp19 + s4*tmp15;
tmp21 = qdd(2) - qdd(3) + qdd(4);
tmp22 = qd(2) - qd(3) + qd(4);
tmp23 = c4*tmp14 + s4*tmp16;
tmp24 = XX4*tmp23 + XY4*tmp19 + XZ4*tmp22;
tmp25 = -qd(2) + qd(3);
tmp26 = tmp16*tmp25;
tmp27 = a3*tmp17 - a3*tmp26 - tmp11 + tmp12 + tmp5;
tmp28 = XZ4*tmp23 + YZ4*tmp19 + ZZ4*tmp22;
tmp29 = tmp19*tmp22;
tmp30 = d5*tmp20 + d5*tmp29 + tmp27;
tmp31 = c5*tmp30;
tmp32 = a2*tmp3;
tmp33 = gravity(1)*c1 + gravity(2)*s1;
tmp34 = -d2*qdd(1) + tmp33;
tmp35 = gravity(3)*s2 + c2*tmp34;
tmp36 = a2*qdd(2) - c2*s2*tmp32 + tmp35;
tmp37 = qd(2)^2;
tmp38 = -gravity(3)*c2 + s2*tmp34;
tmp39 = -a2*tmp37 - s2^2*tmp32 + tmp38;
tmp40 = -c3*tmp36 - s3*tmp39;
tmp41 = a3*tmp14*tmp16 + a3*tmp18 + tmp40;
tmp42 = tmp25^2;
tmp43 = c3*tmp39 - s3*tmp36;
tmp44 = -a3*tmp14^2 - a3*tmp42 + tmp43;
tmp45 = c4*tmp41 + s4*tmp44;
tmp46 = d5*tmp19*tmp23 - d5*tmp21 + tmp45;
tmp47 = s5*tmp46;
tmp48 = c5*tmp22;
tmp49 = s5*tmp23;
tmp50 = -tmp48 - tmp49;
tmp51 = c5*tmp20 + qd(5)*tmp50 - s5*tmp21;
tmp52 = c5*tmp21;
tmp53 = c5*tmp23 - s5*tmp22;
tmp54 = qd(5)*tmp53;
tmp55 = s5*tmp20;
tmp56 = -tmp52 - tmp54 - tmp55;
tmp57 = c4*tmp15 - qd(4)*tmp23 - s4*tmp17;
tmp58 = qdd(5) + tmp57;
tmp59 = qd(5) + tmp19;
tmp60 = c6*tmp59 - s6*tmp53;
tmp61 = c6*tmp51 + qd(6)*tmp60 + s6*tmp58;
tmp62 = qdd(6) + tmp52 + tmp54 + tmp55;
tmp63 = qd(6) + tmp48 + tmp49;
tmp64 = c6*tmp53 + s6*tmp59;
tmp65 = XX6*tmp64 + XY6*tmp60 + XZ6*tmp63;
tmp66 = tmp59^2;
tmp67 = -d6*tmp53^2 - d6*tmp66 + tmp31 + tmp47;
tmp68 = XZ6*tmp64 + YZ6*tmp60 + ZZ6*tmp63;
tmp69 = -MX6*tmp67 + XY6*tmp61 + YZ6*tmp62 + tmp63*tmp65 - tmp64*tmp68;
tmp70 = -MX6*tmp60 + MY6*tmp64;
tmp71 = tmp63^2;
tmp72 = -MX6*tmp71 - MY6*tmp62 + tmp60*tmp70;
tmp73 = MX6*tmp62 - MY6*tmp71 - tmp64*tmp70;
tmp74 = c6*tmp72 - s6*tmp73;
tmp75 = c6*tmp58 - qd(6)*tmp64 - s6*tmp51;
tmp76 = XY6*tmp64 + YZ6*tmp63;
tmp77 = MY6*tmp67 + XX6*tmp61 + XY6*tmp75 + XZ6*tmp62 + tmp60*tmp68 - tmp63*tmp76;
tmp78 = XY5*tmp53 + YZ5*tmp59;
tmp79 = c5*tmp46 - s5*tmp30;
tmp80 = XX5*tmp53 + XY5*tmp50 + XZ5*tmp59;
tmp81 = MX5*(-tmp31 - tmp47) - MY5*tmp79 + XZ5*tmp51 + YZ5*tmp56 + ZZ5*tmp58 + c6*tmp69 + d6*tmp74 + s6*tmp77 - tmp50*tmp80 + tmp53*tmp78;
tmp82 = -MX4*tmp27 + XY4*tmp20 + YZ4*tmp21 + tmp22*tmp24 - tmp23*tmp28 + tmp81;
tmp83 = tmp22^2;
tmp84 = c4*tmp44 - s4*tmp41;
tmp85 = -d5*tmp23^2 - d5*tmp83 + tmp84;
tmp86 = XZ5*tmp53 + YZ5*tmp50 + ZZ5*tmp59;
tmp87 = c6*tmp73 + s6*tmp72;
tmp88 = MY5*tmp85 + XX5*tmp51 + XY5*tmp56 + XZ5*tmp58 + c6*tmp77 - d6*tmp87 - s6*tmp69 + tmp50*tmp86 - tmp59*tmp78;
tmp89 = -MX5*tmp50 + MY5*tmp53;
tmp90 = MX5*tmp58 - MX6*tmp63*tmp64 + MX6*tmp75 - MY5*tmp66 - MY6*tmp60*tmp63 - MY6*tmp61 - tmp53*tmp89;
tmp91 = c5*tmp90;
tmp92 = -MX5*tmp66 - MY5*tmp58 + tmp50*tmp89 + tmp74;
tmp93 = s5*tmp92;
tmp94 = -tmp91 - tmp93;
tmp95 = -d6*tmp50*tmp53 + d6*tmp58 + tmp79;
tmp96 = tmp50*tmp59;
tmp97 = -d6*tmp51 - d6*tmp96 + tmp85;
tmp98 = MY6*(c6*tmp95 + s6*tmp97);
tmp99 = tmp60*tmp65;
tmp100 = MX6*(c6*tmp97 - s6*tmp95);
tmp101 = XZ6*tmp61;
tmp102 = YZ6*tmp75;
tmp103 = ZZ6*tmp62;
tmp104 = tmp64*tmp76;
tmp105 = -MX5*tmp85 + XY5*tmp51 + YZ5*tmp58 - tmp100 - tmp101 - tmp102 - tmp103 - tmp104 - tmp53*tmp86 + tmp59*tmp80 + tmp98 + tmp99;
tmp106 = XY4*tmp23 + YZ4*tmp22;
tmp107 = MY4*tmp27 + XX4*tmp20 + XY4*tmp57 + XZ4*tmp21 + c5*tmp88 + d5*tmp94 - s5*tmp105 - tmp106*tmp22 + tmp19*tmp28;
tmp108 = XZ3*tmp16 + YZ3*tmp14 + ZZ3*tmp25;
tmp109 = XY3*tmp16 + YZ3*tmp25;
tmp110 = MY3*tmp13 + XX3*tmp15 + XY3*tmp17 + XZ3*tmp18 + c4*tmp82 + s4*tmp107 + tmp108*tmp14 - tmp109*tmp25;
tmp111 = XY2*tmp8 + YZ2*qd(2);
tmp112 = XX3*tmp16 + XY3*tmp14 + XZ3*tmp25;
tmp113 = MX4*tmp57;
tmp114 = MY4*tmp20;
tmp115 = MX4*tmp22*tmp23;
tmp116 = MY4*tmp29;
tmp117 = -MX3*tmp13 + XY3*tmp15 + YZ3*tmp18 - a3*(tmp113 - tmp114 - tmp115 - tmp116 + tmp91 + tmp93) + c4*tmp107 - s4*tmp82 - tmp108*tmp16 + tmp112*tmp25;
tmp118 = XZ2*tmp8 - YZ2*tmp6 + ZZ2*qd(2);
tmp119 = MX2*tmp6 + MY2*tmp8;
tmp120 = -MX3*tmp14 + MY3*tmp16;
tmp121 = -MX4*tmp19 + MY4*tmp23;
tmp122 = c5*tmp92 - s5*tmp90;
tmp123 = -MX4*tmp83 - MY4*tmp21 + tmp121*tmp19 + tmp122;
tmp124 = MX4*tmp21 + MX5*tmp53*tmp59 - MX5*tmp56 - MY4*tmp83 + MY5*tmp51 + MY5*tmp96 - tmp121*tmp23 + tmp87;
tmp125 = c4*tmp123 - s4*tmp124;
tmp126 = MX3*tmp18 - MY3*tmp42 - tmp120*tmp16 + tmp125;
tmp127 = -MX3*tmp42 - MY3*tmp18 + c4*tmp124 + s4*tmp123 + tmp120*tmp14;
tmp128 = -c3*tmp126 - s3*tmp127;
tmp129 = XX2*tmp8 - XY2*tmp6 + XZ2*qd(2);
tmp130 = MY3*tmp43;
tmp131 = tmp112*tmp14;
tmp132 = MX3*tmp40;
tmp133 = XZ3*tmp15;
tmp134 = YZ3*tmp17;
tmp135 = ZZ3*tmp18;
tmp136 = a3*tmp125;
tmp137 = tmp109*tmp16;
tmp138 = MX4*tmp84;
tmp139 = XZ4*tmp20;
tmp140 = YZ4*tmp57;
tmp141 = ZZ4*tmp21;
tmp142 = tmp106*tmp23;
tmp143 = MY4*tmp45;
tmp144 = c5*tmp105;
tmp145 = d5*tmp122;
tmp146 = s5*tmp88;
tmp147 = tmp19*tmp24;
tmp148 = tmp138 + tmp139 + tmp140 + tmp141 + tmp142 - tmp143 - tmp144 - tmp145 - tmp146 - tmp147;
torque(1) = MX1*tmp2 - MY1*tmp33 + ZZ1*qdd(1) + c2*(MY2*tmp5 + XX2*tmp7 + XY2*tmp10 + XZ2*qdd(2) + c3*tmp110 - qd(2)*tmp111 - s3*tmp117 - tmp118*tmp6) - d2*(c2*(MX2*qdd(2) - MY2*tmp37 - tmp119*tmp8 + tmp128) + s2*(-MX2*tmp37 - MY2*qdd(2) + c3*tmp127 - s3*tmp126 - tmp119*tmp6)) - s2*(-MX2*tmp5 + XY2*tmp7 + YZ2*qdd(2) - a2*(MX3*tmp17 - MX3*tmp26 - MY3*tmp14*tmp25 - MY3*tmp15 - tmp113 + tmp114 + tmp115 + tmp116 + tmp94) - c3*tmp117 + qd(2)*tmp129 - s3*tmp110 - tmp118*tmp8);
torque(2) = MX2*tmp35 - MY2*tmp38 + XZ2*tmp7 + YZ2*tmp10 + ZZ2*qdd(2) + a2*tmp128 + tmp111*tmp8 + tmp129*tmp6 + tmp130 + tmp131 - tmp132 - tmp133 - tmp134 - tmp135 - tmp136 - tmp137 + tmp148;
torque(3) = -tmp130 - tmp131 + tmp132 + tmp133 + tmp134 + tmp135 + tmp136 + tmp137 - tmp138 - tmp139 - tmp140 - tmp141 - tmp142 + tmp143 + tmp144 + tmp145 + tmp146 + tmp147;
torque(4) = tmp148;
torque(5) = tmp81;
torque(6) = tmp100 + tmp101 + tmp102 + tmp103 + tmp104 - tmp98 - tmp99;
end



